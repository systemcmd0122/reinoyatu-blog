import { GoogleGenerativeAI } from "@google/generative-ai";
import { GenerationOptions } from "@/types";

const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY || "");

export const getGeminiModel = () => {
  return genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
};

// スタイルIDを具体的な指示にマッピング
const styleInstructionMap: { [key: string]: string } = {
  professional: "ビジネス文書として通用する、プロフェッショナルで洗練されたトーンで記述してください。専門用語を適切に用い、客観的で信頼性の高い文章を心がけてください。",
  casual: "親しみやすく、読者が気軽に読めるようなカジュアルなトーンで記述してください。会話に近い自然な表現を使い、絵文字を効果的に（ただし過度ではなく）使用しても構いません。",
  technical: "技術的な内容を正確かつ明確に記述してください。専門用語は一貫して使用し、必要であれば簡単な注釈を加えてください。コードブロックや専門用語のフォーマットは維持してください。",
  educational: "教育的な観点から、読者が新しい知識を学べるように記述してください。複雑な概念は簡単な言葉で説明し、具体的な例を挙げて理解を助けてください。",
  storytelling: "物語を語るように、読者の興味を引きつけ、感情に訴えかけるようなスタイルで記述してください。序盤で読者の関心を引き、中盤で深掘りし、終盤で満足感のある結論を提示してください。",
  minimal: "冗長な表現を避け、要点を的確に伝えるミニマルなスタイルで記述してください。一文一文を短く、簡潔に保ち、最も重要な情報だけを抽出してください。"
};

// Markdownの詳細情報を含む包括的な指示（拡張機能込み）
const getMarkdownComprehensiveGuide = (): string => {
  return `
### サポートされているMarkdown記法の完全ガイド

**基本的なテキスト装飾:**
- **太字**: **太字** または __太字__
- *斜体*: *斜体* または _斜体_
- ~~取り消し線~~: ~~取り消し線~~
- ハイライト: \`highlight-color\`テキスト\` (color: yellow, red, green, blue, purple)
- 絵文字: :tada: のようにコロンで囲んで絵文字を挿入できます。

**見出し（6段階）:**
# 見出し1（最大）
## 見出し2
### 見出し3
#### 見出し4
##### 見出し5
###### 見出し6（最小）

**リスト:**
- 箇条書きリスト: - 項目 または * 項目
- 番号付きリスト: 1. 項目
- チェックボックス:
  - 未完了: - [ ] チェックボックス
  - 完了: - [x] チェックボックス

**リンクと画像:**
- リンク: [テキスト](URL)
- 画像: ![代替テキスト](画像URL)
- 参照スタイルリンク: [テキスト][参照ID]

**コードブロックとハイライト:**
- コードブロック:
\`\`\`language名
コードの内容
\`\`\`
- テキストハイライト: \`highlight-yellow\`重要な部分\` のように色を指定してハイライト
  - 利用可能な色: yellow（デフォルト）, red, green, blue, purple
  - 用途別推奨: 
    - yellow: 一般的な強調
    - red: 警告・重要
    - green: 成功・推奨
    - blue: 情報・補足
    - purple: 特別・特殊

**サポートされるプログラミング言語:**
javascript, typescript, jsx, tsx, html, css, scss, python, java, csharp, cpp, c, php, ruby, go, rust, kotlin, swift, sql, json, xml, yaml, bash, powershell, dockerfile, markdown, text

**引用:**
> 引用テキスト
> 複数行の引用
> も可能です

**水平線:**
--- または *** または ___

**テーブル:**
| 列1 | 列2 | 列3 |
|-----|-----|-----|
| セル1 | セル2 | セル3 |
| セル4 | セル5 | セル6 |

**改行とエスケープ:**
- 行末に2つのスペースで強制改行
- バックスラッシュ（\\）でMarkdown文字をエスケープ

### 独自拡張機能（重要：これらの機能を積極的に活用してください）

**1. スポイラー（ネタバレ防止）:**
- インライン形式: ||隠したいテキスト||
- 行頭形式: /spoiler 隠したいテキスト

使用例:
この映画の結末は||主人公が実は夢の中にいた||という展開です。
/spoiler ゲームの隠しアイテムは城の地下にあります

**2. 警告・情報ボックス（折りたたみ機能付き）:**
基本構文: 
:::タイプ タイトル（任意）
内容
:::

折りたたみ可能な構文:
:::タイプ タイトル [collapsible]
内容
:::

:::タイプ タイトル [collapsible=カスタムタイトル]
内容
:::

利用可能なタイプ:
- **info**: 情報ボックス（青色）
- **warning**: 警告ボックス（黄色）
- **error**: エラーボックス（赤色）
- **success**: 成功ボックス（緑色）
- **note**: ノートボックス（グレー）
- **tip**: ヒントボックス（エメラルド色）
- **important**: 重要ボックス（紫色）
- **caution**: 注意ボックス（オレンジ色）

使用例:
:::warning 重要な注意事項
この設定を変更する前に、必ずバックアップを取得してください。
システムが破損する可能性があります。
:::

:::info ヒント [collapsible]
より詳しい情報が必要な場合は、公式ドキュメントを参照してください。
:::

:::tip 効率化のコツ [collapsible=詳細を見る]
ショートカットキーを覚えることで、作業時間を大幅に短縮できます。
- Ctrl+C: コピー
- Ctrl+V: 貼り付け
- Ctrl+Z: 元に戻す
:::

**3. YouTube動画埋め込み:**
基本構文: {{youtube:VIDEO_ID}}

オプション付き:
- {{youtube:VIDEO_ID:showDetails=true}} - 動画の詳細情報を表示（デフォルト）
- {{youtube:VIDEO_ID:showDetails=false}} - 動画の詳細情報を非表示

使用例:
{{youtube:dQw4w9WgXcQ}}
{{youtube:dQw4w9WgXcQ:showDetails=false}}

**VIDEO_IDの取得方法:**
- 通常のURL: https://www.youtube.com/watch?v=**dQw4w9WgXcQ**
- 短縮URL: https://youtu.be/**dQw4w9WgXcQ**

**4. オーディオプレイヤー:**
基本構文: {{audio:音声ファイルのURL}}
タイトル付き: {{audio:音声ファイルのURL:タイトル}}

使用例:
{{audio:https://example.com/podcast.mp3:第1回ポッドキャスト}}
{{audio:https://example.com/bgm.mp3}}

**5. カウントダウンタイマー:**
基本構文: {{countdown:YYYY-MM-DD HH:mm}}
タイトル付き: {{countdown:YYYY-MM-DD HH:mm:イベント名}}

使用例:
{{countdown:2024-12-31 23:59:新年まで}}
{{countdown:2024-06-15 10:00:製品リリース}}

**6. プログレスバー:**
基本構文: {{progress:現在の値}}
詳細構文: {{progress:現在の値:最大値:ラベル:色}}

利用可能な色: blue, green, red, yellow, purple, pink

使用例:
{{progress:75}}
{{progress:30:50:プロジェクト進捗:green}}
{{progress:80:100:完了率:blue}}

**7. タブ表示:**
構文: {{tabs:タブ1:内容1|タブ2:内容2|タブ3:内容3}}

使用例:
{{tabs:概要:製品の概要説明です|インストール:npm install package-name|使用方法:import { Package } from 'package-name'}}

**8. タイムライン:**
構文: {{timeline:日付1:タイトル1:説明1|日付2:タイトル2:説明2}}

使用例:
{{timeline:2024-01:プロジェクト開始:企画立案開始|2024-03:開発開始:実装フェーズ開始|2024-06:ベータ版:ベータ版リリース|2024-08:正式リリース:一般公開開始}}
{{timeline:Phase 1:要件定義|Phase 2:設計・開発|Phase 3:テスト・検証}}

**9. アコーディオン（折りたたみ式FAQ）:**
構文: {{accordion:質問1:回答1|質問2:回答2|質問3:回答3}}

使用例:
{{accordion:インストール方法は？:npm install コマンドを実行してください|エラーが出た場合は？:ログファイルを確認してください|アップデート方法は？:npm update を実行してください}}

### 拡張機能使用のガイドライン

**効果的な使用場面:**
1. **情報ボックス**: 重要な注意点、補足情報、ヒント
2. **プログレスバー**: プロジェクトの進捗、学習の進度、達成率
3. **タブ**: 複数の情報を整理（概要・詳細・FAQ等）
4. **アコーディオン**: FAQ、トラブルシューティング、詳細説明
5. **タイムライン**: プロジェクトスケジュール、製品ロードマップ、学習計画
6. **カウントダウン**: イベント告知、期限管理、リリース予告
7. **オーディオ**: ポッドキャスト、解説音声、BGM
8. **スポイラー**: ネタバレ、答えの表示、隠し情報

**組み合わせの例:**
プロジェクト進捗レポートでは、タイムラインとプログレスバーを組み合わせて使用し、
重要な注意点は警告ボックス、詳細な説明はアコーディオンで折りたためるようにすると
読みやすい記事になります。

### 重要な注意事項

1. **構文の正確性**: すべての開始タグには対応する終了タグが必要
2. **改行の重要性**: ブロック要素（見出し、リスト、コードブロック等）の前後には空行を入れる
3. **独自機能の配置**: YouTube埋め込み、オーディオプレイヤー等は新しい行に単独で配置
4. **文字エンコーディング**: UTF-8を想定
5. **特殊文字**: Markdownの予約文字を使用する場合はバックスラッシュでエスケープ
6. **警告ボックス**: 開始と終了の:::は必ず行の先頭から記述する
7. **日時形式**: カウントダウンタイマーは YYYY-MM-DD HH:mm 形式を使用

### スタイリングのベストプラクティス

1. **見出しの階層**: h1 → h2 → h3 の順序を守る
2. **リストの統一**: 同一レベルでは同じマーカー（-,*,+）を使用
3. **コードの言語指定**: 可能な限りシンタックスハイライト用の言語を指定
4. **画像の代替テキスト**: 必ず alt属性に相当する説明を記述
5. **リンクの説明**: リンクテキストは内容を表す分かりやすい文言を使用
6. **拡張機能の活用**: 単調な文章にならないよう、適切に拡張機能を使用
7. **情報の階層化**: 重要度に応じて情報ボックスやアコーディオンで整理

この記法を正確に使用し、拡張機能を積極的に活用して、読者にとって魅力的で使いやすい文書を作成してください。
`;
};

export const generateBlogContent = async (
  title: string,
  content: string,
  styles: string[],
  options: GenerationOptions
) => {
  const model = getGeminiModel();

  const {
    keepStructure = true,
    preserveLinks = true,
    enhanceReadability = true,
    summaryLength,
  } = options;

  // 組み立てられたプロンプト
  const styleInstructions = styles.map(s => styleInstructionMap[s]).filter(Boolean);

  const prompt = `
あなたは、与えられたMarkdownの仕様に寸分違わず従うことができる、非常に優秀で厳格なブログ記事編集AIです。
以下の3つの最優先事項を必ず守ってください：

1. 「サポートされているMarkdown記法の完全ガイド」に記載されたルールを**絶対に**守ること。ガイドにない記法は絶対に使用してはいけません。

2. 元の文章の趣旨、主張、意図を100%維持すること。以下は固く禁止されています：
   - 文章の主張や結論の変更
   - 重要な情報の削除や省略
   - 事実やデータの改変
   - 専門用語の言い換えや省略
   - 著者の意見や立場の変更

3. 文章の構造と読みやすさのみを改善すること：
   - Markdown記法の適切な適用
   - 段落分けの最適化
   - 箇条書きやリストの活用
   - 見出しレベルの適切な使用
   - ハイライトや警告ボックスによる強調

${getMarkdownComprehensiveGuide()}

### 元の記事
タイトル: ${title}
内容:
${content}

### 編集指示
${styleInstructions.length > 0 ? `
**文体とトーン:**
${styleInstructions.map(instr => `- ${instr}`).join("\n")}
` : ""}

**構成とフォーマット:**
- ${keepStructure ? "元の見出し、リスト、段落構造を可能な限り維持してください。ただし、Markdown記法をより適切に使用して構造を明確化してください。" : "より論理的で読みやすいように、文章構造を再構成してください。適切な見出し階層を設定し、情報を整理してください。"}
- ${preserveLinks ? "記事内のすべてのハイパーリンクは、正しいMarkdown記法 [テキスト](URL) を使用して、URLとアンカーテキストを含めて完全に保持してください。" : "リンクは不要であれば削除しても構いません。"}
- ${enhanceReadability ? "読者が内容を理解しやすいように、適切な見出し（h2, h3等）、リスト、段落分けを行ってください。長い文章は読みやすい長さに分割してください。" : ""}

**拡張機能の効果的活用（文章の趣旨を変えずに）:**

1. **テキストの強調とハイライト**
   - 重要なポイント: \`highlight-yellow\`重要な内容\`
   - 警告や注意点: \`highlight-red\`注意事項\`
   - ベストプラクティス: \`highlight-green\`推奨方法\`
   - 補足情報: \`highlight-blue\`参考情報\`
   - 特別な内容: \`highlight-purple\`特記事項\`

2. **構造化と整理**
   - コードブロック: 必ず言語指定を付ける（\`\`\`javascript, \`\`\`python等）
   - 重要な情報: :::info, :::warning, :::tip, :::important ボックスを使用
   - 詳細説明: 折りたたみ可能な情報ボックス [collapsible] を活用
   - FAQ形式: {{accordion:質問:回答|質問2:回答2}}
   - 関連情報: {{tabs:タブ1:内容1|タブ2:内容2}}

3. **進捗と時系列**
   - 進捗表示: {{progress:値:最大値:ラベル:色}}
   - スケジュール: {{timeline:日付:タイトル:説明}}
   - 期限設定: {{countdown:日時:タイトル}}

4. **メディアとインタラクティブ要素**
   - 音声: {{audio:URL:タイトル}}
   - ネタバレ防止: ||スポイラー内容||
   - 動画: {{youtube:VIDEO_ID}}

※ これらの拡張機能は、元の文章の意味や主張を変えることなく、情報の整理と視覚的な理解を助けるためにのみ使用してください。

**記事の種類別の拡張機能推奨使用例:**
- **チュートリアル記事**: ステップごとのプログレスバー、重要な注意点の警告ボックス、トラブルシューティングのアコーディオン
- **プロジェクト紹介**: タイムライン、進捗状況のプログレスバー、機能説明のタブ
- **技術解説**: コードブロック、補足情報の折りたたみボックス、関連情報のタブ
- **イベント告知**: カウントダウンタイマー、詳細情報のアコーディオン、注意事項の警告ボックス
- **学習コンテンツ**: 進捗バー、練習問題のスポイラー、重要ポイントのティップボックス

${summaryLength ? `
**要約:**
- 記事の冒頭に、内容を要約した文章を${summaryLength === 'short' ? '短い（3文程度）' : summaryLength === 'medium' ? '中程度（5文程度）' : '詳細な（7-10文程度）'}長さで追加してください。
- 要約は:::info形式の情報ボックスを使用して見やすく表示してください。
` : ""}

### 品質チェックリスト
改善後の記事が以下の条件を満たしているか確認してください：

1. **Markdown記法の正確性**
   - すべての見出し（#, ##, ###等）が正しく記述されている
   - リストのマーカー（-, *, +）が統一されている
   - コードブロックの言語指定が適切
   - リンクの記法 [テキスト](URL) が正確
   - 画像の記法 ![alt](URL) が正確

2. **拡張機能の効果的活用**
   - 情報ボックス（:::info, :::warning等）が適切に使用されている
   - 長い詳細情報は折りたたみ機能やアコーディオンで整理されている
   - タブ機能で関連情報が見やすく分類されている
   - プログレスバーやタイムラインで数値的・時系列的情報が視覚化されている
   - カウントダウンタイマーでイベント情報が魅力的に表示されている

3. **構造の明確性**
   - 見出しの階層が論理的（h1→h2→h3の順序）
   - 段落の分割が適切
   - リストや引用が効果的に使用されている
   - 拡張機能により情報が整理され、読みやすくなっている

4. **読みやすさ**
   - 一つの段落が長すぎない（3-5文程度）
   - 専門用語には適切な説明やインラインコードでのマークアップ
   - 重要な情報が見出し、強調（**太字**）、または情報ボックスで際立っている
   - 拡張機能により単調さが解消され、視覚的に魅力的になっている

5. **独自機能の適切な使用**
   - 情報の重要度に応じて適切な情報ボックスタイプを選択
   - 複雑な情報は折りたたみ機能やアコーディオンで整理
   - 時系列情報はタイムライン、進捗情報はプログレスバーを使用
   - ネタバレ要素には||スポイラータグ||を使用
   - YouTube動画は{{youtube:VIDEO_ID}}で埋め込み

### 出力形式
- **最重要**: 改善後の記事本文のみを、提供されたMarkdownガイドに厳密に従った形式で出力してください。
- **絶対に、出力を\`\`\`text ... \`\`\`のようなコードブロックで囲まないでください。**
- 指示に関するコメントや、前置き・後書きは一切含めないでください。
- 元の記事の意味と内容を変えず、構造と表現、そして視覚的魅力を大幅に改善してください。
- 拡張機能を積極的に活用し、読者にとって魅力的で使いやすい記事に仕上げてください。

**最重要**: 上記の指示、特に「サポートされているMarkdown記法の完全ガイド」に厳密に従ってください。ガイドにないMarkdown記法は絶対に使用しないでください。

記事の改善を開始してください：
`;

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    return { content: text.trim(), error: null };
  } catch (error) {
    console.error("Error generating content:", error);
    return {
      content: null,
      error: "AI処理中にエラーが発生しました。時間をおいて再度お試しください。",
    };
  }
};

export const generateTags = async (title: string, content: string): Promise<{ tags: string[] | null; error: string | null }> => {
  const model = getGeminiModel();

  const prompt = `
あなたはプロのSEO専門家であり、コンテンツアナリストです。
以下のブログ記事のタイトルと内容（拡張Markdown記法を含む）を読み込み、記事の主要なテーマ、トピック、キーワードを正確に特定してください。

記事の内容を最もよく表す、関連性の高いタグを3〜7個生成してください。

### 拡張Markdown記法について
記事内容には以下の拡張Markdown記法が含まれている可能性があります：

**基本Markdown記法:**
- コードブロック（\`\`\`言語名）からはプログラミング言語やフレームワーク名を抽出
- 見出し（#, ##, ###）から主要なトピックを特定
- リンク（[テキスト](URL)）から関連技術や参照先を判断

**独自拡張機能（これらは記事の特徴を表すヒントとして活用）:**
- 情報ボックス（:::info, :::warning, :::tip等）: 記事の種類や重要度を示唆
- YouTube埋め込み（{{youtube:ID}}）: 動画コンテンツ、チュートリアル要素を示唆
- プログレスバー（{{progress:値}}）: プロジェクト、学習進度、達成度関連を示唆
- タイムライン（{{timeline:}}）: プロジェクト管理、スケジュール、ロードマップ関連を示唆
- アコーディオン（{{accordion:}}）: FAQ、解説、ドキュメント要素を示唆
- カウントダウン（{{countdown:}}）: イベント、リリース、期限関連を示唆
- オーディオ（{{audio:}}）: ポッドキャスト、音声コンテンツを示唆
- スポイラー（||テキスト||）: ゲーム、映画、ネタバレ要素を示唆

### タグ生成の条件
- 各タグは簡潔で、単一の単語または短いフレーズ（2-3語以内）
- 記事の内容に直接関連し、記事の価値を的確に表現している
- SEOに役立つ検索キーワードとして機能する
- 技術記事の場合：使用技術、フレームワーク、言語名を含める
- チュートリアル記事の場合：「初心者向け」「入門」「解説」「ガイド」等の学習レベルを含める
- プロジェクト関連の場合：「管理」「計画」「進捗」「ロードマップ」等を含める
- イベント関連の場合：「告知」「イベント」「スケジュール」等を含める
- 重複するタグや類似したタグは避ける
- 日本語または英語（技術用語）で記述

### タグの優先順位
1. **主要技術・ツール名**（例：React, Next.js, Python, Docker）
2. **記事の種類**（例：チュートリアル, 解説, レビュー, ガイド, FAQ）
3. **対象レベル**（例：初心者向け, 上級者向け, 入門）
4. **応用領域**（例：Web開発, データ分析, ゲーム開発, プロジェクト管理）
5. **特定の手法・概念**（例：認証, API設計, パフォーマンス最適化, 進捗管理）
6. **コンテンツ形式**（例：動画解説, 音声コンテンツ, インタラクティブ）

### 拡張機能から推測される記事タイプ
- タイムライン/プログレスバー → プロジェクト管理, 学習コース, ロードマップ
- アコーディオン/情報ボックス → FAQ, ドキュメント, 解説記事
- カウントダウン → イベント告知, リリース情報, 期限管理
- YouTube/オーディオ → 動画解説, 音声コンテンツ, マルチメディア
- スポイラー → ゲーム攻略, 映画レビュー, クイズ・問題集

### 出力形式
- 生成されたタグのみをカンマ区切りで出力してください
- 他のテキスト、説明、コメント、前置き、箇条書き、引用符などは一切含めないでください
- タグの前後にスペースは入れず、カンマの直後にのみスペースを入れてください

### 例
**記事タイトル:** Next.jsとSupabaseでブログを構築する完全ガイド
**記事内容:** この記事では、Next.jsのApp RouterとSupabaseを組み合わせて...
**出力:** Next.js, Supabase, Web開発, ブログ構築, 認証, データベース

**記事タイトル:** プロジェクト管理の進捗を可視化する方法
**記事内容:** {{timeline:2024-01:開始|2024-06:中間}} {{progress:75:100:完了率}}...
**出力:** プロジェクト管理, 進捗管理, 可視化, ガントチャート, チームワーク

---

**記事タイトル:** ${title}

**記事内容:**
${content}

**出力:**`;

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text().trim();

    // より厳密なタグの抽出とクリーンアップ
    const tags = text
      .split(',')
      .map(tag => tag.trim())
      .filter(tag => tag.length > 0 && tag.length <= 30) // 空文字や異常に長いタグを除外
      .slice(0, 7); // 最大7個に制限

    return { tags, error: null };
  } catch (error) {
    console.error("Error generating tags:", error);
    return { 
      tags: null, 
      error: "タグの自動生成中にエラーが発生しました。時間をおいて再度お試しください。" 
    };
  }
};

export const generateChatResponse = async (
  input: string,
  messages: { role: 'user' | 'assistant'; content: string }[],
  currentContent: string,
  title: string
): Promise<{ content: string | null; error: string | null }> => {
  const model = getGeminiModel();

  // チャット履歴を文字列に変換
  const chatHistory = messages
    .map(msg => `${msg.role === 'user' ? 'ユーザー' : 'アシスタント'}: ${msg.content}`)
    .join('\n\n');

  const prompt = `
あなたは、ブログ記事の共同作成を支援する専門的なAIアシスタントです。
現在、"${title}"というタイトルのブログ記事を作成中です。

### 現在の記事内容:
${currentContent}

### これまでのチャット履歴:
${chatHistory}

### ユーザーからの新しい質問/要望:
${input}

### 指示:
1. ユーザーの質問や要望に対して、具体的で実用的な提案や回答を提供してください。
2. 技術的な正確性を保ちながら、分かりやすい説明を心がけてください。
3. 提案する内容は、現在の記事の文脈や目的に沿ったものにしてください。
4. 必要に応じて、コードブロックやMarkdown記法を使用して説明を補強してください。
5. 回答は友好的でプロフェッショナルなトーンを維持してください。

### 制約事項:
- Markdownの記法は、このプロジェクトでサポートされているものだけを使用してください
- コードブロックを含める場合は、必ず言語指定をしてください
- 重要なポイントは \`highlight-色\` を使用してハイライトしてください
- 提案は具体的で実行可能なものにしてください

回答を生成してください：`;

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const content = response.text().trim();
    
    return { content, error: null };
  } catch (error) {
    console.error("Error generating chat response:", error);
    return {
      content: null,
      error: "AI応答の生成中にエラーが発生しました。時間をおいて再度お試しください。"
    };
  }
};

export const generateSummaryFromContent = async (title: string, content: string): Promise<{ summary: string | null; error: string | null }> => {
  const model = getGeminiModel();

  // Markdownの特殊文字を除去して、よりプレーンなテキストに近い形でAIに渡す
  const plainContent = content
    .replace(/---/g, ' ')
    .replace(/#{1,6}\s/g, ' ')
    .replace(/\*\*/g, '')
    .replace(/\*/g, '')
    .replace(/~~/g, '')
    .replace(/`{1,3}[^`]*`{1,3}/g, '')
    .replace(/\|/g, ' ')
    .replace(/\n/g, ' ')
    .replace(/\s{2,}/g, ' ')
    .trim();

  const prompt = `
あなたは、読者の興味を引くのが得意なプロの編集者です。
以下のブログ記事のタイトルと内容を読み、記事の核心を突いた、簡潔で魅力的な要約を生成してください。

### 指示
- 要約は日本語で、およそ150文字程度にまとめてください。
- 記事全体を読みたくなるような、キャッチーな文章を意識してください。
- 記事の重要なキーワードをいくつか含めてください。
- 生成するのは要約の文章のみです。タイトルや前置き、記号などは一切含めないでください。

### 記事のタイトル
${title}

### 記事の内容
${plainContent.substring(0, 3000)}

### 出力形式
要約の文章（150文字程度）

### 要約
`;

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const summary = response.text().trim();

    return { summary, error: null };
  } catch (error) {
    console.error("Error generating summary:", error);
    return { 
      summary: null, 
      error: "AIによる要約の生成中にエラーが発生しました。" 
    };
  }
};